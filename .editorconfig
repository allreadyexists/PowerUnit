# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
root = true

[*.cs]
charset = UTF-8
trim_trailing_whitespace = true
end_of_line = crlf

#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space
indent_size = 4
tab_width = 4

#Formatting - new line options

#place else statements on a new line
csharp_new_line_before_else = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for methods, lambdas, control_blocks, object_collection_array_initializers, and types (also known as "Allman" style)
csharp_new_line_before_open_brace = methods, lambdas, control_blocks, object_collection_array_initializers, types, anonymous_types, properties, accessors

csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true

#Formatting - indent options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

#Formatting - organize using options

# true  Sort System.* using directives alphabetically, and place them before other using directives.
# false Do not place System.* using directives before other using directives.
dotnet_sort_system_directives_first = false

# true  Place a blank line between using directive groups.
# false Do not place a blank line between using directive groups.
dotnet_separate_import_directive_groups = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_after_comma = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_declaration_statements = false


#Formatting - wrapping options

csharp_preserve_single_line_statements = false

#leave code block on single line
csharp_preserve_single_line_blocks = true

#Formatting - using directive options

csharp_using_directive_placement = outside_namespace:silent

# Code Quality
dotnet_code_quality.ca1711.allowed_suffixes = Exception|Collection|Enum

#Style - Code block preferences

#prefer no curly braces if allowed
csharp_prefer_braces = true:none

#skip compound assignment validation
dotnet_style_prefer_compound_assignment = false

#Style - expression bodied member options

#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
#prefer expression-bodied members for methods when they will be a single line
csharp_style_expression_bodied_methods = when_on_single_line:suggestion


#Style - expression level options

#prefer out variables to be declared before the method call
csharp_style_inlined_variable_declaration = false:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer default over default(T)
csharp_prefer_simple_default_expression = true:suggestion
#prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:suggestion
#prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true:suggestion
#prefer return statements to use a ternary conditional over an if-else statemen
dotnet_style_prefer_conditional_expression_over_return = false:suggestion

csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_local_functions = when_on_single_line:suggestion

#Style - implicit and explicit types

#prefer var over explicit type in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = true
#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - Miscellaneous preferences

#prefer local functions over anonymous functions
#csharp_style_pattern_local_over_anonymous_function = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:suggestion

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
#csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:warning
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:warning
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:warning


dotnet_style_readonly_field = true

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.fields_should_begins_with_underline.severity = warning
dotnet_naming_rule.fields_should_begins_with_underline.symbols = field
dotnet_naming_rule.fields_should_begins_with_underline.style = begins_with_underline

dotnet_naming_rule.const_should_be_upper_case.severity = warning
dotnet_naming_rule.const_should_be_upper_case.symbols = constants
dotnet_naming_rule.const_should_be_upper_case.style = capitalized_constants

#dotnet_naming_rule.async_methods_should_end_with_async_suffix.severity = warning
#dotnet_naming_rule.async_methods_should_end_with_async_suffix.symbols = async_method
#dotnet_naming_rule.async_methods_should_end_with_async_suffix.style = async_suffix

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.constants.applicable_kinds = field, property
dotnet_naming_symbols.constants.applicable_accessibilities = *
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_symbols.field.applicable_kinds = field
dotnet_naming_symbols.field.applicable_accessibilities = *
dotnet_naming_symbols.field.required_modifiers =

dotnet_naming_symbols.async_method.applicable_kinds = method, local_function
dotnet_naming_symbols.async_method.applicable_accessibilities = *
dotnet_naming_symbols.async_method.required_modifiers = async

# Naming styles

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.begins_with_underline.required_prefix = _
dotnet_naming_style.begins_with_underline.required_suffix =
dotnet_naming_style.begins_with_underline.word_separator =
dotnet_naming_style.begins_with_underline.capitalization = camel_case

dotnet_naming_style.capitalized_constants.required_prefix = 
dotnet_naming_style.capitalized_constants.required_suffix = 
dotnet_naming_style.capitalized_constants.word_separator = _
dotnet_naming_style.capitalized_constants.capitalization = all_upper

dotnet_naming_style.async_suffix.required_prefix = 
dotnet_naming_style.async_suffix.required_suffix = Async
dotnet_naming_style.async_suffix.word_separator =
dotnet_naming_style.async_suffix.capitalization = pascal_case

# Analyzer diagnostics

dotnet_analyzer_diagnostic.severity = warning
dotnet_analyzer_diagnostic.category-performance.severity = error
dotnet_analyzer_diagnostic.category-style.severity = error
dotnet_analyzer_diagnostic.category-naming.severity = error
dotnet_analyzer_diagnostic.category-design.severity = warning


# CA diagnostics

# CA1000: Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = none

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = none

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = suggestion

# CA1014: Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1014.severity = none

# CA1028: Enum storage should be Int32
dotnet_diagnostic.CA1028.severity = none

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = none

# CA1056: URI-like properties should not be strings
dotnet_diagnostic.CA1056.severity = suggestion

# CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = none

# CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = suggestion

# CA1040: Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = none

# CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = none

# CA1716: Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = none

# CA1724: 
dotnet_diagnostic.CA1724.severity = none

# CA1812: Avoid uninstantiated internal classes 
dotnet_diagnostic.CA1812.severity = none

# CA1819: Properties should not return arrays
dotnet_diagnostic.CA1819.severity = none

# CA1848: 
dotnet_diagnostic.CA1848.severity = none

# CA2254:
dotnet_diagnostic.CA2254.severity = none


# CA2007: Invoke ConfigureAwait with awaiting Task
dotnet_diagnostic.CA2007.severity = none

# CA2227: Collection properties should be read only
dotnet_diagnostic.CA2227.severity = none

# CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = suggestion

# IDE diagnostics

#IDE0007: Use var instead of explicit type
dotnet_diagnostic.IDE0007.severity = suggestion

#IDE0010: Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = none

#IDE0019: Use pattern matching to avoid 'as' followed by a 'null' check
dotnet_diagnostic.IDE0019.severity = none

# IDE0022: Use expression body for methods
dotnet_diagnostic.IDE0022.severity = suggestion

# IDE0025:
dotnet_diagnostic.IDE0025.severity = warning

# IDE0028:
dotnet_diagnostic.IDE0028.severity = warning

# IDE0031: Use null propagation
dotnet_diagnostic.IDE0031.severity = suggestion

# IDE0045: Convert to conditional expression
dotnet_diagnostic.IDE0045.severity = suggestion

# IDE0046: Use conditional expression for return
dotnet_diagnostic.IDE0046.severity = suggestion

# IDE0050: Transform to tuple
dotnet_diagnostic.IDE0050.severity = suggestion

# IDE0055: fix code formatting
dotnet_diagnostic.IDE0055.severity = warning

# IDE0058
dotnet_diagnostic.IDE0058.severity = none

# IDE0059: Unnecessary value assignment
dotnet_diagnostic.IDE0059.severity = suggestion

# IDE0060:
dotnet_diagnostic.IDE0060.severity = warning

# IDE0066:
dotnet_diagnostic.IDE0066.severity = warning

# IDE0072: Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = none

# IDE0078: Use pattern matching
dotnet_diagnostic.IDE0078.severity = warning

# IDE0083: Use pattern matching (not operator)
dotnet_diagnostic.IDE0083.severity = warning

# IDE0090: Simplify new expression
dotnet_diagnostic.IDE0090.severity = none

# IDE0130: Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = suggestion

# IDE0160: Convert to block namespace
dotnet_diagnostic.IDE0160.severity = none

# IDE0270: Null check can be simplified
dotnet_diagnostic.IDE0270.severity = warning

# IDE1006:
dotnet_diagnostic.IDE1006.severity = warning

# IDE2000:
dotnet_diagnostic.IDE2000.severity = warning

# IDE2003:
dotnet_diagnostic.IDE2003.severity = warning

# CS8321: Local function is declared but never used
dotnet_diagnostic.CS8321.severity = warning

# CA1826: Use property instead of Linq Enumerable method
dotnet_code_quality.CA1826.exclude_ordefault_methods = true
csharp_indent_labels = one_less_than_current
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = block_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = false:silent
csharp_style_prefer_primary_constructors = false:suggestion
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_prefer_system_threading_lock = true:suggestion

# CA1814: Prefer jagged arrays over multidimensional
[*.{cs,vb}]
dotnet_diagnostic.CA1814.severity = none

# CA1822: 
[*.{cs,vb}]
dotnet_diagnostic.CA1822.severity = warning

# CA1043: Use integral or string argument for indexers
[*.{cs,vb}]
dotnet_diagnostic.CA1043.severity = none

# CA1308: Normalize strings to uppercase
[*.{cs,vb}]
dotnet_diagnostic.CA1308.severity = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:error
dotnet_style_allow_statement_immediately_after_block_experimental = false:error
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:suggestion
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:error
csharp_style_allow_embedded_statements_on_same_line_experimental = false:error
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
indent_size = 4
end_of_line = crlf
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = false:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_prefer_collection_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = false:suggestion