// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

using PowerUnit.Infrastructure.IEC104ServerDb.PostgreSql;

#nullable disable

namespace PowerUnit.Migrations
{
    [DbContext(typeof(PowerUnitIEC104ServerPostgreSqlDbContext))]
    [Migration("20250827115333_Migration_00002_Add_Content")]
    partial class Migration_00002_Add_Content
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pu_iec104_server")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104GroupItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Group")
                        .HasColumnType("smallint")
                        .HasColumnName("group");

                    b.Property<long>("MappingId")
                        .HasColumnType("bigint")
                        .HasColumnName("mapping_id");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("MappingId")
                        .HasDatabaseName("ix_groups_mapping_id");

                    b.ToTable("groups", "pu_iec104_server");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104MappingItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Address")
                        .HasColumnType("integer")
                        .HasColumnName("address");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("equipment_id");

                    b.Property<string>("ParameterId")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("parameter_id");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasDefaultValue("")
                        .HasColumnName("source_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_mappings");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_mappings_type_id");

                    b.HasIndex(new[] { "ServerId", "SourceId", "EquipmentId", "ParameterId", "Address", "TypeId" }, "IX_IEC104MappingItem")
                        .IsUnique()
                        .HasDatabaseName("ix_mappings_server_id_source_id_equipment_id_parameter_id_addr");

                    b.ToTable("mappings", "pu_iec104_server");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerApplicationLayerOptionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CheckCommonASDUAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("check_common_asdu_address");

                    b.Property<bool>("SporadicSendEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sporadic_send_enabled");

                    b.HasKey("Id")
                        .HasName("pk_application_layer_options");

                    b.ToTable("application_layer_options", "pu_iec104_server");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerChannelLayerOptionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxQueueSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("max_queue_size");

                    b.Property<byte>("Timeout0Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)30)
                        .HasColumnName("timeout0sec");

                    b.Property<byte>("Timeout1Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)15)
                        .HasColumnName("timeout1sec");

                    b.Property<byte>("Timeout2Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)10)
                        .HasColumnName("timeout2sec");

                    b.Property<byte>("Timeout3Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)20)
                        .HasColumnName("timeout3sec");

                    b.Property<bool>("UseFragmentSend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("use_fragment_send");

                    b.Property<int>("WindowKSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(12)
                        .HasColumnName("window_k_size");

                    b.Property<int>("WindowWSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(8)
                        .HasColumnName("window_w_size");

                    b.HasKey("Id")
                        .HasName("pk_channel_layer_options");

                    b.ToTable("channel_layer_options", "pu_iec104_server");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationLayerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("application_layer_option_id");

                    b.Property<int>("ChannelLayerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("channel_layer_option_id");

                    b.Property<int>("CommonASDUAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("common_asdu_address");

                    b.Property<bool>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<int>("Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2404)
                        .HasColumnName("port");

                    b.HasKey("Id")
                        .HasName("pk_servers");

                    b.HasIndex("ApplicationLayerOptionId")
                        .HasDatabaseName("ix_servers_application_layer_option_id");

                    b.HasIndex("ChannelLayerOptionId")
                        .HasDatabaseName("ix_servers_channel_layer_option_id");

                    b.ToTable("servers", "pu_iec104_server");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104TypeItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_types");

                    b.ToTable("types", "pu_iec104_server");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104GroupItem", b =>
                {
                    b.HasOne("PowerUnit.Infrastructure.IEC104ServerDb.IEC104MappingItem", "Mapping")
                        .WithMany()
                        .HasForeignKey("MappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_mappings_mapping_id");

                    b.Navigation("Mapping");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104MappingItem", b =>
                {
                    b.HasOne("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerItem", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mappings_servers_server_id");

                    b.HasOne("PowerUnit.Infrastructure.IEC104ServerDb.IEC104TypeItem", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mappings_types_type_id");

                    b.Navigation("Server");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerItem", b =>
                {
                    b.HasOne("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerApplicationLayerOptionItem", "ApplicationLayerOption")
                        .WithMany("IEC104ServerItems")
                        .HasForeignKey("ApplicationLayerOptionId")
                        .HasConstraintName("fk_servers_application_layer_options_application_layer_option_");

                    b.HasOne("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerChannelLayerOptionItem", "ChannelLayerOption")
                        .WithMany("ServerItems")
                        .HasForeignKey("ChannelLayerOptionId")
                        .HasConstraintName("fk_servers_channel_layer_options_channel_layer_option_id");

                    b.Navigation("ApplicationLayerOption");

                    b.Navigation("ChannelLayerOption");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerApplicationLayerOptionItem", b =>
                {
                    b.Navigation("IEC104ServerItems");
                });

            modelBuilder.Entity("PowerUnit.Infrastructure.IEC104ServerDb.IEC104ServerChannelLayerOptionItem", b =>
                {
                    b.Navigation("ServerItems");
                });
#pragma warning restore 612, 618
        }
    }
}
