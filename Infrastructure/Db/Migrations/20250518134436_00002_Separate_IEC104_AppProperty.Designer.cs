// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PowerUnit;

#nullable disable

namespace PowerUnit.Migrations
{
    [DbContext(typeof(PowerUnitDbContext))]
    [Migration("20250518134436_00002_Separate_IEC104_AppProperty")]
    partial class _00002_Separate_IEC104_AppProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("power_unit")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PowerUnit.DiscretTypeItem", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_discret_types");

                    b.ToTable("discret_types", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.EquipmentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("equipment_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("serial_number");

                    b.HasKey("Id")
                        .HasName("pk_equipments");

                    b.HasIndex("SerialNumber")
                        .HasDatabaseName("ix_equipments_serial_number");

                    b.HasIndex("EquipmentTypeId", "SerialNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_equipments_equipment_type_id_serial_number");

                    b.ToTable("equipments", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.EquipmentTypeItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_equipment_types");

                    b.ToTable("equipment_types", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.IEC104GroupItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Group")
                        .HasColumnType("smallint")
                        .HasColumnName("group");

                    b.Property<long>("IEC104MappingId")
                        .HasColumnType("bigint")
                        .HasColumnName("iec104mapping_id");

                    b.HasKey("Id")
                        .HasName("pk_iec104groups");

                    b.HasIndex("Group")
                        .HasDatabaseName("ix_iec104groups_group");

                    b.HasIndex("IEC104MappingId")
                        .HasDatabaseName("ix_iec104groups_iec104mapping_id");

                    b.ToTable("iec104groups", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.IEC104MappingItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Address")
                        .HasColumnType("integer")
                        .HasColumnName("address");

                    b.Property<long>("EquipmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("equipment_id");

                    b.Property<int>("IEC104TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("iec104type_id");

                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_type_id");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.HasKey("Id")
                        .HasName("pk_iec104mappings");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_iec104mappings_equipment_id");

                    b.HasIndex("IEC104TypeId")
                        .HasDatabaseName("ix_iec104mappings_iec104type_id");

                    b.HasIndex("ParameterTypeId")
                        .HasDatabaseName("ix_iec104mappings_parameter_type_id");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_iec104mappings_server_id");

                    b.ToTable("iec104mappings", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.IEC104ServerApplicationLayerOptionItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("CheckCommonASDUAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("check_common_asdu_address");

                    b.Property<byte>("FileSegmentSize")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)200)
                        .HasColumnName("file_segment_size");

                    b.Property<bool>("SporadicSendEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sporadic_send_enabled");

                    b.HasKey("Id")
                        .HasName("pk_iec104server_application_layer_option_item");

                    b.ToTable("iec104server_application_layer_option_item", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.IEC104ServerChannelLayerOptionItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<byte>("Timeout0Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)30)
                        .HasColumnName("timeout0sec");

                    b.Property<byte>("Timeout1Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)15)
                        .HasColumnName("timeout1sec");

                    b.Property<byte>("Timeout2Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)10)
                        .HasColumnName("timeout2sec");

                    b.Property<byte>("Timeout3Sec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)20)
                        .HasColumnName("timeout3sec");

                    b.Property<bool>("UseFragmentSend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("use_fragment_send");

                    b.Property<int>("WindowKSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(12)
                        .HasColumnName("window_k_size");

                    b.Property<int>("WindowWSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(8)
                        .HasColumnName("window_w_size");

                    b.HasKey("Id")
                        .HasName("pk_iec104server_channel_layer_option");

                    b.ToTable("iec104server_channel_layer_option", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.IEC104ServerItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommonASDUAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("common_asdu_address");

                    b.Property<bool>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<int>("Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2404)
                        .HasColumnName("port");

                    b.HasKey("Id")
                        .HasName("pk_iec104servers");

                    b.ToTable("iec104servers", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.IEC104TypeItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_iec104types");

                    b.ToTable("iec104types", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.MeasurementItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EquipmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("equipment_id");

                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_type_id");

                    b.Property<DateTime>("RegistrationDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_dt");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.Property<DateTime>("ValueDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("value_dt");

                    b.HasKey("Id")
                        .HasName("pk_measurements");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_measurements_equipment_id");

                    b.HasIndex("ParameterTypeId")
                        .HasDatabaseName("ix_measurements_parameter_type_id");

                    b.HasIndex("ValueDt", "EquipmentId", "ParameterTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_measurements_value_dt_equipment_id_parameter_type_id");

                    b.ToTable("measurements", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.MeasurementTypeItem", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_measurement_types");

                    b.ToTable("measurement_types", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.ParameterTypeItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<byte>("DiscretTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("discret_type_id");

                    b.Property<byte>("MeasurementTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("measurement_type_id");

                    b.HasKey("Id")
                        .HasName("pk_parameter_types");

                    b.HasIndex("DiscretTypeId")
                        .HasDatabaseName("ix_parameter_types_discret_type_id");

                    b.HasIndex("MeasurementTypeId")
                        .HasDatabaseName("ix_parameter_types_measurement_type_id");

                    b.ToTable("parameter_types", "power_unit");
                });

            modelBuilder.Entity("PowerUnit.EquipmentItem", b =>
                {
                    b.HasOne("PowerUnit.EquipmentTypeItem", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipments_equipment_types_equipment_type_id");

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("PowerUnit.IEC104GroupItem", b =>
                {
                    b.HasOne("PowerUnit.IEC104MappingItem", "IEC104Mapping")
                        .WithMany()
                        .HasForeignKey("IEC104MappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_iec104groups_iec104mappings_iec104mapping_id");

                    b.Navigation("IEC104Mapping");
                });

            modelBuilder.Entity("PowerUnit.IEC104MappingItem", b =>
                {
                    b.HasOne("PowerUnit.EquipmentItem", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_iec104mappings_equipments_equipment_id");

                    b.HasOne("PowerUnit.IEC104TypeItem", "IEC104Type")
                        .WithMany()
                        .HasForeignKey("IEC104TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_iec104mappings_iec104types_iec104type_id");

                    b.HasOne("PowerUnit.ParameterTypeItem", "ParameterType")
                        .WithMany()
                        .HasForeignKey("ParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_iec104mappings_parameter_types_parameter_type_id");

                    b.HasOne("PowerUnit.IEC104ServerItem", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_iec104mappings_iec104servers_server_id");

                    b.Navigation("Equipment");

                    b.Navigation("IEC104Type");

                    b.Navigation("ParameterType");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("PowerUnit.IEC104ServerApplicationLayerOptionItem", b =>
                {
                    b.HasOne("PowerUnit.IEC104ServerItem", null)
                        .WithOne("ApplicationLayerOption")
                        .HasForeignKey("PowerUnit.IEC104ServerApplicationLayerOptionItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_iec104server_application_layer_option_item_iec104servers_id");
                });

            modelBuilder.Entity("PowerUnit.IEC104ServerChannelLayerOptionItem", b =>
                {
                    b.HasOne("PowerUnit.IEC104ServerItem", null)
                        .WithOne("ChannelLayerOption")
                        .HasForeignKey("PowerUnit.IEC104ServerChannelLayerOptionItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_iec104server_channel_layer_option_iec104servers_id");
                });

            modelBuilder.Entity("PowerUnit.MeasurementItem", b =>
                {
                    b.HasOne("PowerUnit.EquipmentItem", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurements_equipments_equipment_id");

                    b.HasOne("PowerUnit.ParameterTypeItem", "ParameterType")
                        .WithMany()
                        .HasForeignKey("ParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurements_parameter_types_parameter_type_id");

                    b.Navigation("Equipment");

                    b.Navigation("ParameterType");
                });

            modelBuilder.Entity("PowerUnit.ParameterTypeItem", b =>
                {
                    b.HasOne("PowerUnit.DiscretTypeItem", "DiscretType")
                        .WithMany()
                        .HasForeignKey("DiscretTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_types_discret_types_discret_type_id");

                    b.HasOne("PowerUnit.MeasurementTypeItem", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_types_measurement_types_measurement_type_id");

                    b.Navigation("DiscretType");

                    b.Navigation("MeasurementType");
                });

            modelBuilder.Entity("PowerUnit.IEC104ServerItem", b =>
                {
                    b.Navigation("ApplicationLayerOption");

                    b.Navigation("ChannelLayerOption");
                });
#pragma warning restore 612, 618
        }
    }
}
